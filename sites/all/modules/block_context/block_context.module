<?php
include 'block_context_ui.inc';

/************************************
 *  BLOCK CONTEXT
 *
 *  Manage blocks by their context
 *  by Maedi 2011
 *
 *  http://drupal.org/project/block_context
 *
 * ***********************************/

// THEME AND LOGIC FUNCTIONS

/**
 * Implements hook_theme().
 * declare this theme function and template file so that the preprocess function below may use it.
 */
function block_context_theme() {
  return array(
    'block_context_admin_display_form' => array(
      'template' => 'block-context-admin-display-form',
      'render element' => 'form',
    ),
  );
}

/**
 * Pre-Processes variables for block-admin-display-form.tpl.php
 * then Display in template block-context-admin-display-form.tpl.php
 *
 * $vars : array containing data needed for the present page and more
 */
function block_context_preprocess_block_admin_display_form(&$vars) {

  // Define Contexts
  $contexts = array('path' => 'Path', 'node-type' => 'Node type', 'role' => 'Role');
  $context = block_context_current();

  // Setup Defaults for each Context
  switch ($context) {

    case 'path':
    default:

      // define page title
      $title = block_context_current_path() != '' ? 'Blocks for ' . block_context_current_path() : 'All Blocks' ;
      drupal_set_title($title);

      // Store paths
      $all_paths = array();
      // add Main Menu paths to $all_paths as defaults
      block_context_add_menu_to_paths($all_paths, menu_main_menu());

      // Define Path Data of Block Listing
      foreach ($vars['block_listing'] as $region_key => $region) {
        // per block
        foreach ($vars['block_listing'][$region_key] as $block_key => $block) {

          // Load Block as well as Menu Paths
          $block = block_context_block_load($block_key);

          // Add all Block Paths to Paths Data Store
          // if block has paths, and the blocks paths are not hidden paths
          if (isset($block->pages) && $block->visibility = 1) {

            // load block paths
            $paths = block_context_textarea_to_paths($block->pages);

            // add paths to sections array
            foreach ($paths as $key => $path) {

              // will not add the same path more than once
              block_context_add_path_to_paths($all_paths, $path);
            }
          }
        }
      }
    break;

    case 'role':
      // store roles
      $all_roles = user_roles();

      // define page title
      $title = block_context_current_rid() != '' ? 'Blocks for ' . $all_roles[block_context_current_rid()] . 's' : 'All Blocks' ;
      drupal_set_title($title);
    break;

    case 'node-type':
      // store nodes
      $all_node_types = block_context_node_types();

      // define page title
      $title = block_context_current_node_type() != '' ? 'Blocks for ' . block_context_current_node_type() . 's' : 'All' ;
      drupal_set_title($title);
    break;
  }


  // Alter Block Listing
  foreach ($vars['block_listing'] as $region_key => $region) {

    // per block
    foreach ($vars['block_listing'][$region_key] as $block_key => $block) {

      // Load Block as well as Menu Paths
      $block = block_context_block_load($block_key);

      switch ($context) {

        // Show Blocks that have their paths present in the current path context
        case 'path':
        default:

          // if block contains pages data
          if (isset($block->pages)) {

            // load block paths
            $block_paths = block_context_textarea_to_paths($block->pages);

            // filter block by path if path context has path argument
            if (block_context_current() != '') {

              if (block_context_paths_match_current_path($block_paths)) {

                $vars['block_listing'][$region_key][$block_key]->visibility = 0;
              }
              else {
                $vars['block_listing'][$region_key][$block_key]->visibility = -1;
              }
            }
            // if no contexts, show every block
            else {
              $vars['block_listing'][$region_key][$block_key]->visibility = 1;
            }
          }
          // hide block if no pages data
          else {
            $vars['block_listing'][$region_key][$block_key]->visibility = -1;
          }

          // Add a dropdown menu per block
          $vars['block_listing'][$region_key][$block_key]->context_select = ui_paths_dropdown($all_paths, $block_key, $block_paths);

        break;

        // Show Blocks that have a Role ID that matches with the current context's Role ID
        case 'role':

          // load block rid's
          $block_roles = block_context_block_load_roles($block);

          // role context has argument
          if ( block_context_current_rid() != '') {

            // show blocks with matching role
            if ( block_context_roles_match_current_role($block_roles) ) {

              $vars['block_listing'][$region_key][$block_key]->visibility = 1;
            }
            // hide blocks with no matching role
            else {
              $vars['block_listing'][$region_key][$block_key]->visibility = -1;
            }
          }
          // role context has no argument
          else {
            $vars['block_listing'][$region_key][$block_key]->visibility = 0;
          }

          // Add a dropdown menu per block
          $vars['block_listing'][$region_key][$block_key]->context_select = ui_roles_dropdown($block_key, $block_roles);

        break;

        // Show Blocks that have a Node type that matches with the current context's Node type
        case 'node-type':

          // load block rid's
          $block_node_types = block_context_block_load_node_types($block);

          // role context has argument
          if ( block_context_current_node_type() != '') {

            // show blocks with matching role
            if ( block_context_roles_match_current_node_type($block_node_types) ) {

              $vars['block_listing'][$region_key][$block_key]->visibility = 1;
            }
            // hide blocks with no matching role
            else {
              $vars['block_listing'][$region_key][$block_key]->visibility = -1;
            }
          }
          // role context has no argument
          else {
            $vars['block_listing'][$region_key][$block_key]->visibility = 0;
          }

          // Add a dropdown menu per block
          $vars['block_listing'][$region_key][$block_key]->context_select = ui_node_types_dropdown($block_key, $block_node_types);

        break;
      }
    }
  }

  // Hook into block admin page variables (before reaches theme layer)
  $vars['theme_hook_suggestions'][] = 'block_context_admin_display_form';

  // Notify template of all contexts and current context
  $vars['block_context']['contexts'] = $contexts;
  $vars['block_context']['context'] = $context;

  // Create appropriate UI Context Menu
  switch ($context) {

    case 'path':
    default:
      // Add Block Context Paths menu to block admin template theme
      $vars['block_context']['ui_menu'] = ui_paths_menu($all_paths);
    break;

    case 'role':
      // Add Block Context Roles menu to block admin template theme
      $vars['block_context']['ui_menu'] = ui_roles_menu($all_roles);
    break;

    case 'node-type':
      // Add Block Context Node types menu to block admin template theme
      $vars['block_context']['ui_menu'] = ui_node_types_menu($all_node_types);
    break;
  }
}

/**
 * Implements hook_form_alter().
 * add our re-assign block feature on submit.
 */
function block_context_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'block_admin_display_form') {

    // admin function to be run when block admin page is submitted
    $form['#submit'][] = 'block_context_admin_display_form_submit';

    // move function callback to top of array so that it is run first
    $form['#submit'] = array_reverse($form['#submit']);
  }
}


// PROCESS FUNCTIONS

/**
 * Save and Replace Block Contexts
 * block_context_theme() calls this function
 * existing and new paths are saved in $_POST
 */
function block_context_admin_display_form_submit($form, &$form_state) {

  // Define Context
  $context = block_context_current();

  // Update Blocks

  // for each submitted block
  foreach ($_POST['blocks'] as $block_key => $item) {

    // store blocks last known path
    static $block_redirect_path;

    // whether user has selected new path
    static $changed = FALSE;

    // load block
    $block = block_context_block_load($block_key);

    switch ($context) {

      case 'path':

        // load user submitted path
        if ( isset($item['path']) ) {

          // get all existing paths
          $paths = block_context_textarea_to_paths($block->pages);

          // CONVERT ACTIONS IF BLOCK PATH HAS BEEN CHANGED

          // compare new path with existing last path (new path overwrites last path)
          if ( $item['path'] != end($paths) ) {

            // stop All and '' from triggering change
            if ( $item['path'] != 'All' && $paths != '' ) {

              $changed = TRUE;
              $block_redirect_path = $item['path'];

              // replace previous block path with new (last element is only ever edited)
              array_pop($paths);
              $paths[] = $item['path'];

              // format for Drupal blocks 'Pages' textarea
              $pages = block_context_paths_to_textarea($paths);

              // replace original 'Pages' entry with updated paths
              block_context_block_update_path($block_key, $pages);

              // user messages
              if ( $block->title != '' ) {
                drupal_set_message($block->title . ' block moved to "' . htmlspecialchars($item['path']) . '".');
              }
              else {
                drupal_set_message($block_key . ' block moved to "' . htmlspecialchars($item['path']) . '".');
              }
            }
          }
        }
      break;

      case 'role':

        // load user submitted role
        if ( isset($item['rid']) ) {

          // CONVERT ACTIONS IF BLOCK ROLE HAS BEEN CHANGED

          // compare new role with existing last role (new role overwrites last role)
          if ($item['rid'] != block_context_current_rid()) {

            $changed = TRUE;
            $block_redirect_path = $item['rid'];

            // load current block roles
            // $block_roles = block_context_block_load_roles($block);

            // replace original role with updated role
            block_context_block_update_role($block, block_context_current_rid(), $item['rid']);

            // user messages
            $all_roles = user_roles();

            if ( $block->title != '' ) {
              drupal_set_message($block->title . ' changed to the "' . htmlspecialchars($all_roles[$item['rid']]) . '" role.');
            }
            else {
              drupal_set_message($block_key . ' changed to the "' . htmlspecialchars($all_roles[$item['rid']]) . '" role.');
            }
          }
        }
      break;
    }
  }
  // redirect if user has selected a new path for any of the blocks
  if ($changed) {
    block_context_redirect_to_path($block_redirect_path, $context);
  }
}

/**
 * Update a Blocks Pages
 */
function block_context_block_update_path($block_key, $pages) {

  // get block module and delta
  $id = explode('_', $block_key);
  $module = $id[0];
  $delta = $id[1];

  // update block
  db_update('block')
  ->fields(array(
    'pages' => $pages,
    'visibility' => 1,
  ))
  ->condition('module', $module, '=')
  ->condition('delta', $delta, '=')
  ->execute();
}

/**
 * Return a Blocks Role ID's
 */

function block_context_block_load_roles($block) {

  $results = db_select('block_role', 'role')
    ->fields('role')
    ->condition('module', $block->module, '=')
    ->condition('delta', $block->delta, '=')
    ->execute()
    ->fetchAll();

  $roles = array();
  foreach ($results as $key => $value) {

    $roles[] = $results[$key]->rid;
  }
  //dpm($block->delta);
  //dpm($roles);
  return $roles;
}

/**
 * Update a Blocks Role
 */
function block_context_block_update_role($block, $old_rid, $new_rid) {

  // update block
  db_update('block_role')
  ->fields(array(
    'rid' => $new_rid,
  ))
  ->condition('rid', $old_rid, '=')
  ->condition('module', $block->module, '=')
  ->condition('delta', $block->delta, '=')
  ->execute();
}


/**
 * Return a Blocks Node type's
 */

function block_context_block_load_node_types($block) {

  $results = db_select('block_node_type', 'node')
    ->fields('node')
    ->condition('module', $block->module, '=')
    ->condition('delta', $block->delta, '=')
    ->execute()
    ->fetchAll();

  $node_types = array();
  foreach ($results as $key => $value) {

    $node_types[] = $results[$key]->type;
  }
  //dpm($block->delta);
  //dpm($node_types);

  return $node_types;
}

/**
 * Redirects the user to the desired page
 */
function block_context_redirect_to_path($path, $context) {

  if ($path == 'All') {
    drupal_goto('admin/structure/block/');
  }
  else {
    drupal_goto('admin/structure/block/' . $context . '/' . $path);
  }
}

// STORAGE FUNCTIONS

/**
 * Textarea to Paths
 * convert Drupal's textarea-paths format to an array of paths
 *
 * $string : a string representing the block 'pages' textarea
 * returns : an array of this block's paths
 */
function block_context_textarea_to_paths($string) {

  return preg_split("/[\s,]+/", $string);
}

/**
 * Paths to Textarea
 *
 * $paths  : an array of paths
 * returns : a string in Drupal's textarea-paths format
 */
function block_context_paths_to_textarea($paths) {

  // stop form 'All' option from making changes
  if ($paths[0] == 'All') {
    return '';
  }
  elseif (count($paths) == 1 ) {
    return $paths[0];
  }
  else {
    // convert array to Drupal's textarea path format string
    return implode("\n", $paths);
  }
}

/**
 * Add Path to Sections
 * adds a path(key) and title(value) combo uniquely to the sections array
 */
function block_context_add_path_to_paths(&$all_paths, $path, $title = NULL) {

  // if path supplied
  if ($path != '') {

    // make the title the same as the path if no title supplied
    if ($title == NULL) {
      $title = $path;
    }

    // handle <front> paths and lowercase all other paths
    if ($path == '<front>') {

      $path = htmlspecialchars($path);
      $title = 'Front';
    }
    else {
      $path = drupal_strtolower($path);
    }

    // will not add the same path to the array more than once
    if (!isset($all_paths[$path])) {
      $all_paths[$path] = $title;
    }
  }
}

// Add Drupal menus to an array storing paths and their titles
function block_context_add_menu_to_paths(&$all_paths, $menu) {

  foreach ($menu as $key => $value) {

    $title = $menu[$key]['title'];
    $path = $menu[$key]['href'];

    // convert 'node/123' paths to aliases
    $path_type = explode('/', $path);

    if ($path_type[0] == 'node') {

      $path = drupal_lookup_path('alias', $path);
    }
    block_context_add_path_to_paths($all_paths, $path, $title);
  }
}

function block_context_node_types() {

  $drupal_node_types = node_type_get_types();
  $node_types = array();

  foreach ($drupal_node_types as $key => $node) {
    $node_types[$node->type] = $node->name;
  }
  return $node_types;
}

// MATCHING LOGIC

/**
 * One of Paths Matches Current Path
 * returns : boolean
 */
function block_context_paths_match_current_path($block_paths) {

  foreach ($block_paths as $key => $value) {

    $path = drupal_strtolower($value);

    if ($path == block_context_current_path()) {
      return TRUE;
    }
  }
}

/**
 * One of the Role IDs Matches the Current Role ID
 * returns : boolean
 */
function block_context_roles_match_current_role($block_roles) {

  foreach ($block_roles as $key => $rid) {

    if ($rid == block_context_current_rid()) {
      return TRUE;
    }
  }
}

function block_context_block_roles_matches_role($block_roles, $rid) {

  foreach ($block_roles as $key => $block_rid) {

    if ($block_rid == $rid) {
      return TRUE;
    }
  }
}

/**
 * One of the Node types Matches the Current Role ID
 * returns : boolean
 */
function block_context_roles_match_current_node_type($block_roles) {

  foreach ($block_roles as $key => $rid) {

    if ($rid == block_context_current_rid()) {
      return TRUE;
    }
  }
}

function block_context_block_node_types_matches_node_type($block_node_types, $node_type) {

  foreach ($block_node_types as $key => $block_node_type) {

    if ($block_node_type == $node_type) {
      return TRUE;
    }
  }
}

// CONTEXT ACCESSORS

/**
 * Block Context Load
 * returns: the block and its context data
 */
function block_context_block_load($block_key) {

  // $block_key is in form 'module_delta'
  $id = explode('_', $block_key);
  return block_load($id[0], $id[1]);
}

/**
 * Current Block Context
 * returns : admin/structure/block/[context]
 */
function block_context_current() {
  return arg(3);
}

/**
 * Current Block Path
 * removes : [admin/structure/block/path/]path
 * returns : admin/structure/block/path/[path]
 */
function block_context_current_path() {

  $args = array_slice(arg(), 4);
  return implode('/', $args);
}

/**
 * Current Block Role ID
 * returns : admin/structure/block/path/[rid]
 */
function block_context_current_rid() {

  return arg(4);
}

/**
 * Current Block Node Type
 * returns : admin/structure/block/path/[node_type]
 */
function block_context_current_node_type() {

  return arg(4);
}