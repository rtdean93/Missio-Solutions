<?php

/**
 * @file
 * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
 * http://www.absyx.fr
 */

/**
 * Implementation of hook_init().
 */
function ckeditor_link_init() {
  if (!variable_get('clean_url', 0)) {
    module_disable(array('ckeditor_link'));
    drupal_set_message(t('<em>CKEditor Link</em> has been disabled. <a href="!url">Clean URLs</a> need to be enabled for this module to work properly.', array('!url' => url('admin/config/search/clean-urls'))), 'warning');
  }
}

/**
 * Implementation of hook_permission().
 */
function ckeditor_link_permission() {
  return array(
    'access ckeditor link' => array('title' => t('Access <em>CKEditor Link</em>')),
    'administer ckeditor link' => array('title' => t('Administer <em>CKEditor Link</em>')),
  );
}

/**
 * Implementation of hook_menu().
 */
function ckeditor_link_menu() {
  $items['ckeditor_link/autocomplete'] = array(
    'page callback' => 'ckeditor_link_autocomplete',
    'access arguments' => array('access ckeditor link'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/ckeditor_link'] = array(
    'title' => 'CKEditor Link',
    'description' => 'Configure CKEditor Link.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ckeditor_link_settings_form'),
    'access arguments' => array('administer ckeditor link'),
    'file' => 'ckeditor_link.admin.inc',
  );
  return $items;
}

function ckeditor_link_autocomplete($string = '') {
  $matches = array();

  if ($string !== '') {
    $types = ckeditor_link_get_types();
    $results = array();
    foreach ($types as $type) {
      $func = $type['module'] .'_ckeditor_link_'. $type['type'] .'_autocomplete';
      if (function_exists($func)) {
        $results += $func($string);
        if (count($results) > 10) {
          break;
        }
      }
    }

    array_splice($results, 10);
    foreach ($results as $path => $title) {
      $matches[$title .' ('. $path. ')'] = '<div class="reference-autocomplete">'. check_plain($title) .'</div>';
    }
  }

  drupal_json_output($matches);
}

function ckeditor_link_get_types() {
  static $types;

  if (!isset($types)) {
    $types = array();

    $data = array();
    foreach (module_implements('ckeditor_link_types') as $module) {
      $func = $module .'_ckeditor_link_types';
      $data[$module] = $func();
    }

    foreach ($data as $module => $_types) {
      foreach ($_types as $type) {
        if (!is_array($type)) {
          $type = array('type' => $type);
        }
        $type['module'] = $module;
        $types[$module .'.'. $type['type']] = $type;
      }
    }

    drupal_alter('ckeditor_link_types', $types);
    $types = array_values($types);

    foreach ($types as $type) {
      if (isset($type['file'])) {
        require_once(drupal_get_path('module', $type['module']) .'/'. $type['file']);
      }
    }
  }

  return $types;
}

/**
 * Implementation of hook_ckeditor_link_types().
 */
function ckeditor_link_ckeditor_link_types() {
  $types[] = array('type' => 'node', 'file' => 'includes/ckeditor_link.node.inc');
  if (module_exists('taxonomy')) {
    $types[] = array('type' => 'taxonomy', 'file' => 'includes/ckeditor_link.taxonomy.inc');
  }
  $types[] = array('type' => 'menu', 'file' => 'includes/ckeditor_link.menu.inc');

  return $types;
}

/**
 * Implementation of hook_form_alter().
 */
function ckeditor_link_form_alter(&$form, &$form_state) {
  if (user_access('access ckeditor link')) {
    $form['#after_build'][] = 'ckeditor_link_process_form';
  }
}

function ckeditor_link_process_form(&$form, &$form_state) {
  static $added = FALSE;
  if (!$added && ($js = drupal_add_js()) && isset($js['settings']['data'])) {
    $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
    if (isset($settings['ckeditor']) || isset($settings['wysiwyg']['configs']['ckeditor'])) {
      drupal_add_css(drupal_get_path('module', 'ckeditor_link') .'/ckeditor_link.css');
      drupal_add_js('misc/autocomplete.js');
      drupal_add_js(array('ckeditor_link' => array(
        'module_path' => base_path() . drupal_get_path('module', 'ckeditor_link'),
        'autocomplete_path' => url('ckeditor_link/autocomplete'),
        'msg_invalid_path' => t('Link must be a valid Drupal path.'),
        'type_name' => ckeditor_link_get_link_type_name(),
        'type_selected' => (bool) variable_get('ckeditor_link_type_selected', 1),
      )), 'setting');
      $added = TRUE;
    }
  }
  return $form;
}

/**
 * Implementation of hook_ckeditor_plugin().
 */
function ckeditor_link_ckeditor_plugin() {
  return array('ckeditor_link' => array(
    'name' => 'drupal_path',
    'desc' => t('CKEditor Link - A plugin to easily create links to Drupal internal paths'),
    'path' => drupal_get_path('module', 'ckeditor_link') .'/plugins/link/',
  ));
}

/**
 * Implementation of hook_wysiwyg_plugin().
 */
function ckeditor_link_wysiwyg_plugin($editor, $version) {
  if (($editor == 'ckeditor') && user_access('access ckeditor link')) {
    return array('drupal_path' => array(
      'path' => drupal_get_path('module', 'ckeditor_link') .'/plugins/link/',
      'load' => TRUE,
      'extensions' => array('Link' => t('CKEditor Link')),
    ));
  }
}

/**
 * Implementation of hook_filter_info().
 */
function ckeditor_link_filter_info() {
  $filters['ckeditor_link_filter'] = array(
    'title' => t('CKEditor Link Filter'),
    'description' => t('Converts links added through <em>CKEditor Link</em> into aliased and language prefixed URLs.'),
    'process callback' => 'ckeditor_link_filter_process',
  );
  return $filters;
}

function ckeditor_link_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return preg_replace_callback('`\bhref="'. preg_quote(base_path(), '`') .'([^?#"]+)`', '_ckeditor_link_filter_process', $text);
}

function _ckeditor_link_filter_process($matches) {
  $path = $matches[1];

  $types = ckeditor_link_get_types();
  foreach ($types as $type) {
    $func = $type['module'] .'_ckeditor_link_'. $type['type'] .'_url';
    if (function_exists($func)) {
      $url = $func($path);
      if ($url) {
        return 'href="'. $url;
      }
    }
  }

  return 'href="'. base_path() . $path;
}

function ckeditor_link_get_link_type_name() {
  return t(variable_get('ckeditor_link_type_name', 'Internal path'), array('!site_name' => variable_get('site_name', 'Drupal')));
}
