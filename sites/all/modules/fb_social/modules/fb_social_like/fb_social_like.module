<?php

/**
 * Implementation of hook fb_social_plugins_info
 */
function fb_social_like_fb_social_plugins_info() {
  $info = array();
  $info['like'] = array(
    'name' => 'like',
    'description' => 'Like button',
  );

  return $info;
}

/**
 * Implementation of hook init
 * @todo og:image (http://developers.facebook.com/docs/reference/plugins/like)
 *
 */
function fb_social_like_init() {
  $object = menu_get_object();
  if (!is_object($object)) return;  //@todo what's changed in menu_get_ojbect ?
  
  if (! $object->nid) {
    return;
  }

  $presets = fb_social_enabled_presets('like');
  foreach ( $presets as $preset ) {
    if ($preset->settings['opengraph_tags'] && fb_social_like_type($preset, $object->type)) {
      $tags = TRUE;
    }
  }
  if ($tags) {
    //add fbml header meta information
    $data = '<meta property="og:title" content="' . check_plain($object->title) . '"/>' . "\n";
    $data .= '<meta property="og:site_name" content="' . variable_get('site_name', '') . '"/>' . "\n";
    // @todo maybe look for images/imagefields uploaded/attached to the node ?
    // $data .= '<meta property="og:image" content="http://ia.media-imdb.com/rock.jpg"/>';
    drupal_add_html_head($data, $key = 'fb_social_opengraph');

  }
}

/**
 * Implements hook_fb_social_default_presets
 */
function fb_social_like_fb_social_default_presets(){
  $export = array();
  $fb_social_preset = new stdClass();
  $fb_social_preset->disabled = FALSE; /* Edit this to true to make a default fb_social_preset disabled initially */
  $fb_social_preset->api_version = 1;
  $fb_social_preset->name = 'fb_like_default';
  $fb_social_preset->description = 'the default ';
  $fb_social_preset->plugin_type = 'like';
  $fb_social_preset->settings = array(
      'node_types' => array(
          'types' => array(
              'article' => 0, 
              'page' => 0, 
              'poll' => 0 
          ) 
      ), 
      'opengraph_tags' => 1, 
      'plugin_location' => array(
          'location' => '0', 
          'display_teasers' => 1 
      ), 
      'block' => 0 
  );
  $fb_social_preset->fb_attrs = array(
      'layout' => 'button_count', 
      'show_faces' => 0, 
      'width' => '350', 
      'action' => 'like', 
      'font' => 'verdana', 
      'colorscheme' => 'dark' 
  );
  
  $export['fb_like_default'] = $fb_social_preset;
  
  return $export;
}

/**
 * Implements hook_block_info().
 */
function fb_social_like_block_info(){
  // load all presets
  $presets = fb_social_enabled_presets('like');
  
  $blocks = array();
  foreach ( $presets as $preset ) {
    if ($preset->settings['block']) {
      $blocks[$preset->name] = array(
          'info' => $preset->name . ' block' 
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fb_social_like_block_view($delta){
  
  $block['subject'] = t('');
  $preset = fb_social_preset_load($name = $delta, $reset = FALSE);
  $url = fb_social_url($_GET['q']);
  $block['content'] = theme('fb_social_preset', array(
      'preset' => $preset, 
      'extra' => array(
          'href' => $url 
      ) 
  ));
  return $block;
}


/**
 * Implements hook_content_extra_fields().
 */
function fb_social_like_field_extra_fields() {
  $extras = array();
  $presets = fb_social_enabled_presets('like');
  foreach ( $presets as $preset ) {
  	$type_names = array_filter($preset -> settings['node_types']['types']);
  	foreach($type_names as $type_name){
	    if (fb_social_like_type($preset, $type_name) && $preset->settings['plugin_location']['location']) {
	      $extras['node'][$type_name]['display']['fb_social_like_' . $preset->name] = array(
	        'label' => t('Facebook social:  like plugin'),
	        'description' => t('The "like" plugin field from ' . $preset->name . ' preset'),
	        'weight' => - 10,
	      );
	      
	    }
  	}
  }
  return $extras;
}

/**
 * Implements hook_node_view().
 */
function fb_social_like_node_view($node, $view_mode = 'full') {

  // preset in links area
  $links = fb_social_like_link('node', $node, $view_mode == 'teaser');
  if ($links){
    $node->content['links']['fb_social_like'] = array(
      '#theme' => 'links__node__fb_social',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
	
  $presets = fb_social_enabled_presets('like');
  

  foreach ( $presets as $preset ) {
    if ($node->status && fb_social_like_type($preset, $node->type) && $preset->settings['plugin_location']['location']) {
      //if ($a4 || $preset->settings['plugin_location']['display_teasers'] && $a3) {
        $output = theme('fb_social_preset', array('preset' => $preset, 'extra' => array(
            'href' => fb_social_url('node/' . $node->nid),
          )));
        //$weight = (module_exists('content')) ? content_extra_field_weight($node->type, 'fb_social_like_' . $preset->name) : - 10;
        $node->content['fb_social_like_' . $preset->name] = array(
          '#markup' => $output,
        );
      //}
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function fb_social_like_nodeapi_OLD(&$node, $op, $a3 = NULL, $a4 = NULL) { }

/**
 * Returns the html content to be included in node links.
 */
function fb_social_like_link($type, $object, $teaser = FALSE) {
  $presets = fb_social_enabled_presets('like');
  foreach ( $presets as $preset ) {
    //only nodes are supported
    if ('node' != $type) {
      return;
    }
    
    // do we have to show for the content type ?
    if (!($preset->settings['node_types']['types'][$object -> type])){
    	return;
    }


    // dont like unpublished nodes
    if (! $object->status) {
      return;
    }

    // if no plugin on teasers return
    if ($teaser && ! $preset->settings['plugin_location']['display_teasers']) {
      return;
    }

    // plugin is not to be displayed in the node links. return
    if ($preset->settings['plugin_location']['location']) {
      return;
    }

    // good to go
    $links = array();
    if ($type == 'node' && fb_social_like_type($preset, $object->type)) {
      $links['fb_social_like_' . $preset->name] = array(
        'title' => theme('fb_social_preset', array('preset' => $preset, 'extra' => array(
            'href' => fb_social_url('node/' . $object->nid),
          ))),
        'html' => TRUE,
      );
    }

    return $links;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function fb_social_like_ctools_plugin_api($module, $api) {
  if ($module == 'boxes' && $api == 'plugins') {
    return array(
      'version' => 1,
    );
  }
}

/**
 * Implements hook_boxes_plugins().
 */
function fb_social_like_boxes_plugins() {
  $info = array();

  $info['fbs_like'] = array(
    'title' => 'facebook social like',
    'handler' => array(
      'class' => 'fb_social_like_box',
      'file' => 'fb_social_like_boxes.inc',
      'path' => drupal_get_path('module', 'fb_social_like'),
      'parent' => 'fb_social_boxes_default',
    ),
  );

  return $info;
}

/**
 * Does $preset should be shown on node of type $type
 */
function fb_social_like_type($preset, $type) {
  $types = ($preset->settings['node_types']['types']);
  if (! is_array($types)) {
    return FALSE;
  }

  return in_array($type, array_values($types));
}


/**
 * Implements hook_views_api().
 */
function fb_social_like_views_api() {
  return array(
    'api' => '2.0',
  );
}
